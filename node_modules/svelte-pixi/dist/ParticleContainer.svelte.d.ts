import { SvelteComponentTyped } from "svelte";
/**
   * @restProps {Container}
   */
import * as PIXI from 'pixi.js';
declare class __sveltets_Render<T extends PIXI.ParticleContainer> {
    props(): {
        accessible?: boolean | undefined;
        accessibleChildren?: boolean | undefined;
        accessibleHint?: string | undefined;
        accessiblePointerEvents?: PIXI.PointerEvents | undefined;
        accessibleTitle?: string | undefined;
        accessibleType?: string | undefined;
        alpha?: number | undefined;
        angle?: number | undefined;
        cacheAsBitmap?: boolean | undefined;
        cacheAsBitmapMultisample?: PIXI.MSAA_QUALITY | undefined;
        cacheAsBitmapResolution?: number | undefined;
        cullable?: boolean | undefined;
        cullArea?: PIXI.Rectangle | undefined;
        cursor?: string | undefined;
        filterArea?: PIXI.Rectangle | undefined;
        filters?: PIXI.Filter[] | null | undefined;
        height?: number | undefined;
        hitArea?: PIXI.IHitArea | null | undefined;
        eventMode?: PIXI.EventMode | undefined;
        interactive?: boolean | undefined;
        interactiveChildren?: boolean | undefined;
        isMask?: boolean | undefined;
        isSprite?: boolean | undefined;
        mask?: PIXI.Container<PIXI.DisplayObject> | PIXI.MaskData | null | undefined;
        name?: string | null | undefined;
        pivot?: import("./util/data-types").PointLike | undefined;
        position?: import("./util/data-types").PointLike | undefined;
        renderable?: boolean | undefined;
        rotation?: number | undefined;
        scale?: import("./util/data-types").PointLike | undefined;
        skew?: import("./util/data-types").PointLike | undefined;
        sortableChildren?: boolean | undefined;
        width?: number | undefined;
        transform?: PIXI.Transform | undefined;
        visible?: boolean | undefined;
        x?: number | undefined;
        y?: number | undefined;
        zIndex?: number | undefined;
        instance?: T | undefined;
        applyPropOnMount?: boolean | undefined;
    } & {
        maxSize?: number | undefined;
        properties?: PIXI.IParticleProperties | undefined;
        batchSize?: number | undefined;
        autoResize?: boolean | undefined;
    };
    events(): {
        create: CustomEvent<any>;
        click: CustomEvent<any>;
        globalmousemove: CustomEvent<any>;
        globalpointermove: CustomEvent<any>;
        globaltouchmove: CustomEvent<any>;
        mousedown: CustomEvent<any>;
        mousemove: CustomEvent<any>;
        mouseout: CustomEvent<any>;
        mouseover: CustomEvent<any>;
        mouseup: CustomEvent<any>;
        mouseupoutside: CustomEvent<any>;
        pointercancel: CustomEvent<any>;
        pointerdown: CustomEvent<any>;
        pointermove: CustomEvent<any>;
        pointerout: CustomEvent<any>;
        pointerover: CustomEvent<any>;
        pointertap: CustomEvent<any>;
        pointerup: CustomEvent<any>;
        pointerupoutside: CustomEvent<any>;
        removedFrom: CustomEvent<any>;
        rightclick: CustomEvent<any>;
        rightdown: CustomEvent<any>;
        rightup: CustomEvent<any>;
        rightupoutside: CustomEvent<any>;
        tap: CustomEvent<any>;
        touchcancel: CustomEvent<any>;
        touchend: CustomEvent<any>;
        touchendoutside: CustomEvent<any>;
        touchmove: CustomEvent<any>;
        touchstart: CustomEvent<any>;
        added: CustomEvent<any>;
        removed: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots(): {
        default: {};
    };
}
export type ParticleContainerProps<T extends PIXI.ParticleContainer> = ReturnType<__sveltets_Render<T>['props']>;
export type ParticleContainerEvents<T extends PIXI.ParticleContainer> = ReturnType<__sveltets_Render<T>['events']>;
export type ParticleContainerSlots<T extends PIXI.ParticleContainer> = ReturnType<__sveltets_Render<T>['slots']>;
export default class ParticleContainer<T extends PIXI.ParticleContainer> extends SvelteComponentTyped<ParticleContainerProps<T>, ParticleContainerEvents<T>, ParticleContainerSlots<T>> {
}
export {};
