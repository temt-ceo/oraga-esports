import { SvelteComponentTyped } from "svelte";
interface TickerContext<T extends PIXI.Ticker = PIXI.Ticker> {
    ticker: T;
}
export declare function getTicker<T extends PIXI.Ticker = PIXI.Ticker>(): TickerContext<T>;
export declare function onTick(fn: (delta: number) => any, priority?: number): void;
import * as PIXI from 'pixi.js';
declare class __sveltets_Render<T extends PIXI.Ticker> {
    props(): {
        instance?: T | undefined;
        autoStart?: boolean | undefined;
        maxFPS?: number | undefined;
        minFPS?: number | undefined;
        speed?: number | undefined;
        priority?: number | undefined;
    };
    events(): {
        tick: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots(): {
        default: {};
    };
}
export type TickerProps<T extends PIXI.Ticker> = ReturnType<__sveltets_Render<T>['props']>;
export type TickerEvents<T extends PIXI.Ticker> = ReturnType<__sveltets_Render<T>['events']>;
export type TickerSlots<T extends PIXI.Ticker> = ReturnType<__sveltets_Render<T>['slots']>;
export default class Ticker<T extends PIXI.Ticker> extends SvelteComponentTyped<TickerProps<T>, TickerEvents<T>, TickerSlots<T>> {
}
export {};
