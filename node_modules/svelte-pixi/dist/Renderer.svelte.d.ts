import { SvelteComponentTyped } from "svelte";
export interface RendererContext<T extends PIXI.Renderer | PIXI.IRenderer> {
    renderer: T;
    invalidate: () => void;
}
export declare function getRenderer<T extends PIXI.Renderer | PIXI.IRenderer>(): RendererContext<T>;
import * as PIXI from 'pixi.js';
declare class __sveltets_Render<T extends PIXI.Renderer | PIXI.IRenderer> {
    props(): Partial<PIXI.IRendererOptionsAuto> & {
        instance?: T | undefined;
        stage?: PIXI.Container<PIXI.DisplayObject> | undefined;
    };
    events(): {
        invalidate: CustomEvent<any>;
        prerender: CustomEvent<any>;
        postrender: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots(): {
        default: {};
        view: {};
    };
}
export type RendererProps<T extends PIXI.Renderer | PIXI.IRenderer> = ReturnType<__sveltets_Render<T>['props']>;
export type RendererEvents<T extends PIXI.Renderer | PIXI.IRenderer> = ReturnType<__sveltets_Render<T>['events']>;
export type RendererSlots<T extends PIXI.Renderer | PIXI.IRenderer> = ReturnType<__sveltets_Render<T>['slots']>;
export default class Renderer<T extends PIXI.Renderer | PIXI.IRenderer> extends SvelteComponentTyped<RendererProps<T>, RendererEvents<T>, RendererSlots<T>> {
}
export {};
